name: 'Molnett - Ephemeral Environments'
description: 'Deploy or delete an ephemeral environment'
branding:
  icon: 'download-cloud'
  color: 'orange'
inputs:
  action:
    description: 'Either "deploy" or "delete"'
    required: true
  manifest-path:
    description: 'Path to molnett manifest'
    required: true
  copy-from:
    description: 'Which environment to copy resources (e.g. secrets) from'
outputs:
  environment-name:
    description: 'Name of the created environment'
    value: ${{ steps.env-name.outputs.env }}
  environment-id:
    description: 'ID of the created environment'
    value: ${{ steps.env-id.outputs.env-id }}
  service-name:
    description: 'Name of the deployed service'
    value: ${{ steps.deploy.outputs.name }}
runs:
  using: 'composite'
  steps:
  - name: Check Event
    if: ${{ github.event_name != 'pull_request' }}
    shell: bash
    env:
      EVENT_NAME: ${{ github.event_name }}
    run: |
      echo "::error title=⛔ error hint::action needs pull request event, was $EVENT_NAME"
      exit 1
  - name: Check Action
    if: ${{ inputs.action != 'deploy' && inputs.action != 'delete' }}
    shell: bash
    run: |
      echo "::error title=⛔ error hint::action needs to be deploy or delete"
      exit 1
  - name: Check Runner OS
    if: ${{ runner.os != 'Linux' }}
    shell: bash
    run: |
      echo "::error title=⛔ error hint::Support Linux Only"
      exit 1
  - name: Environment Name
    id: env-name
    shell: bash
    env:
      ENV_NAME: ${{ github.head_ref }}
    run: |
      # Replace special characters in branch name with dash
      ENV_NAME=$(echo $ENV_NAME | tr $'!\'#$%&()+,-./;<=>@]_\`{|}' '-' | cut -c -30)
      echo "env=$ENV_NAME" >> $GITHUB_OUTPUT
  - name: Deploy Ephemeral Environment
    id: deploy
    if: ${{ inputs.action == 'deploy' }}
    shell: bash
    env:
      ENV_NAME: ${{ steps.env-name.outputs.env }}
      MANIFEST: ${{ inputs.manifest-path }}
      COPY_FROM: ${{ inputs.copy-from }}
    run: |
      if [ $COPY_FROM ]; then molnctl environments create $ENV_NAME --copy-from=$COPY_FROM || true; else molnctl environments create $ENV_NAME || true; fi
      molnctl services deploy --env $ENV_NAME --no-confirm $MANIFEST
      FINAL_NAME=$(cat $MANIFEST | yq .services[0].name)
      ID=$(molnctl envs list | grep -w $ENV_NAME | awk '{print $2}')
      echo "name=$FINAL_NAME" >> $GITHUB_OUTPUT
      echo "env-id=$ID" >> $GITHUB_OUTPUT
  - name: Delete Ephemeral Environment
    if: ${{ inputs.action == 'delete' }}
    shell: bash
    env:
      ENV_NAME: ${{ steps.env-name.outputs.env }}
    run: |
      molnctl environments delete --no-confirm $ENV_NAME
